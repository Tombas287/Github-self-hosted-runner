
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "myrelease.fullname" . }}
  labels:
    {{- include "myrelease.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "myrelease.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "myrelease.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "myrelease.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: dind
          image: docker:dind
          securityContext:
            privileged: true  # Required for Docker-in-Docker
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""  # Disable TLS
          command: [ "dockerd", "--host=tcp://0.0.0.0:2375" ]
          ports:
            - containerPort: 2375
        - name: {{ .Chart.Name }}
          securityContext:
            privileged: true
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/home/adminuser/start.sh"]
          env:
            - name: ORGANIZATION
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.secretName }}
                  key: ORGANIZATION
            - name: ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.secretName }}
                  key: ACCESS_TOKEN

            - name: DOCKER_HOST
              value: "tcp://localhost:2375"  # Connect to Docker-in-Docker
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}